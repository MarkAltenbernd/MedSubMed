 //	Import deployed addresses of MSM contracts 
const { atMSMFacade } = require('./MSMDeployedAddresses.js');


const MSMFacade = artifacts.require("MSMFacade");
const MedSubMed = artifacts.require("MedSubMed");
const Util1538 = artifacts.require("Util1538");

const ts = require('../ma_modules/timestamp');
const ls = require('../ma_modules/trace');

require('dotenv').config();
const Web3 = require('web3');
//	Enable one of the following
const web3 = new Web3(process.env.LOCAL_URL);
//const web3 = new Web3(process.env.KOVAN_URL);
//const web3 = new Web3(process.env.RINKEBY_URL);
//const web3 = new Web3(process.env.ROPSTEN_URL);

contract('The MSMFuncs.remove script . . .', async (accounts) => { 
	ls("\nContract start:\t" + ts() + "\n");
	//	Establish several important account defaults
	const DEFAULT_ACCOUNT = accounts[process.env.DEFAULT_ACCOUNT];	
	web3.eth.defaultAccount = DEFAULT_ACCOUNT;
	//	For instantiating Factories . . .
	const MSM_OWNER  = accounts[process.env.MSM_OWNER];
	//	. . . and creating Facades
	const MSM_MANAGER = accounts[process.env.MSM_MANAGER];
	const opts = Object({from: MSM_OWNER});
	
	let functionSignatures;
	let medSubMed, msmFacade;
	let result;

	try {
		it(". . . initiates.", () => { 
			ls("CONTRACT START:\t" + ts());
		});
		it(". . . instantiates a facade.", async () => {
			MSMFacade.abi = MSMFacade.abi.concat(MedSubMed.abi);
			MSMFacade.abi = MSMFacade.abi.concat(Util1538.abi);
			
			msmFacade = await MSMFacade.at(atMSMFacade, opts);
			assert.ok(msmFacade, "MyTransparentContract not ennewed()");
		});

//E I T H E R - - -		
/*	Enable to remove ALL delegated contracts except updateContract()
		it(". . . builds a list of ALL existing functions, then removes the first one.", async () => {
			result = await msmFacade.functionSignatures.call(opts);
			//	Assumes: 
			//		- updateContract() will always be at the beginning of list
			//		- its sig will always be 'updateContract(address,string,string)'
			const updateContractSig = "updateContract(address,string,string)"
			functionSignatures = result.substring(updateContractSig.length); 
			ls("\n" + ts() + "\tFunctions to be removed:\n>>" + functionSignatures + "<<");
		});	//*/
		
//O R - - -
/*	Enable to remove only delegated contracts from an externally generated hard-coded list
//	A useful list can be generated by MSMFuncs.list.js. 
		it(" . . . contains a hard-coded string of signatures of functions to be removed", async () => {
			//Paste the externally generated list here
			functionSignatures =  //*
				  "getMSMSubnNFT(uint256)"
				+ "";
			;
		});	//*/
//*N O W - - -
		it(". . . removes the specified functions." , async () => {
			//	The first argument is the magic value indicating removal is the action to be taken. 
			//	It must be entered as shown - "0x" followed by 40 character zeroes. Why a string? 
			//	Because JavaScript does not know about the EVM address type and has no analog for it.
			const tx = await msmFacade.updateContract("0x0000000000000000000000000000000000000000", functionSignatures, "Removing functions.", opts);
			assert.ok(tx, "Function removal failed.");
			ls("\n\tThe specified functions have been removed:\n>>" + functionSignatures + "<<\n\n");
		});	//*/
		it(" . . . terminates.", () => { 
			ls("CONTRACT END:\t" + ts());
		});
	} catch {
		
	}
});
	